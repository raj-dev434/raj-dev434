--TWO SUM 2--
import java.util.Arrays;

class Main{
    public static void main(String[]args){
        int[]nums1={2,7,9,11};
        int target=11;
        System.out.print(Arrays.toString(twosum(nums1,target)));
    }
    static int[] twosum(int[]nums1,int target){
        int left=0;
        int right=nums1.length-1;
        while(left<right){
            int sum=nums1[left]+nums1[right];
            if(sum==target){
                return new int[]{left,right};
            }
            else if(sum<target){
                left++;
            }
            else{
                right--;
            }
        }
        return new int[]{-1,-1};
    }
}
----------------------------------------------------------------------------------------
--THREE SUM--
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Main{
    public static void main(String[]args){
        int[]nums={1,2,3,-2,-1,0};
        List<List<Integer>>results=threesum(nums);
        for(List<Integer>result:results){
            System.out.print(result);
        }
    }
     static List<List<Integer>>threesum(int[]nums){
        List<List<Integer>>res=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            if(i>0&&nums[i]==nums[i-1]) continue;
            int left=i+1;
            int right=nums.length-1;
            int sum=nums[i]+nums[left]+nums[right];
            if(sum==0){
                res.add(Arrays.asList(nums[i],nums[left],nums[right]));
                while(left<right&&nums[left]==nums[left+1])left++;
                while(left<right&&nums[right]==nums[right-1])right--;
            }
            else if(sum>0){
                left++;
            }
            else{
                right--;
            }
        }
        return res;
    }
}
-----------------------------------------------------------------------------------
--FOUR SUM--
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Main{
    public static void main(String[]args){
        int[]nums={1,2,3,-2,-1,0};
        int target=0;
        List<List<Integer>>results=threesum(nums,target);
        for(List<Integer>result:results){
            System.out.print(result);
        }
    }
     static List<List<Integer>>threesum(int[]nums,int target){
       Arrays.sort(nums);
       List<List<Integer>>res =new ArrayList<>();
       int n=nums.length;
       for(int i=0;i<n-3;i++){
           if(i>0 && nums[i]==nums[i-1])continue;{
               for(int j=i+1;j<n-2;j++){
                   if(j>i+1 && nums[j]==nums[j-1])continue;{
                       int left=j+1;
                       int right=n-1;
                       while(left<right){
                           long sum=(long)nums[i]+nums[j]+nums[left]+nums[right];
                           if(sum==target){
                               res.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));
                               left++;
                               right--;
                               while(left<right&&nums[left]==nums[left-1])left++;
                               while(left<right&&nums[right]==nums[right+1])right--;
                           }
                           else if(sum<target){
                               left++;
                           }
                           else{
                               right--;
                           }
                       }
                   }
               }
           }
       }
       return res;
    }
}
------------------------------------------------------------------------------------------------
--WATER CONTAINER--
class Main{
    public static void main(String[]args){
        int[]height={1, 8, 6, 2, 5, 4, 8, 3, 7};
        System.out.print(container(height));
        }

     static int container(int[]height) {
         int left = 0;
         int right = height.length-1;
         int max = 0;
         while (left < right) {
             int h = Math.min(height[left], height[right]);
             int w = right-left;
             int area = h * w;
             max = Math.max(area,max);
             if (height[left]<height[right]) {
                 left++;
             } else {
                 right--;
             }
         }
         return max;
     }
}
-------------------------------------------------------------------------------------
---REMOVE DUPLICATE II-----
class Main{
    public static void main(String[]args){
        int[]nums={1,1,2,2,3,3,4,5};
        System.out.print(duplicate(nums));
        }

     static int duplicate(int[]nums) {
       if(nums.length<=2)return nums.length;
       int i=2;
       for(int j=2;j<nums.length;j++){
           if(nums[j]!=nums[i-2]){
               nums[i]=nums[j];
               i++;
           }
       }
       return i;
     }
}
----------------------------------------------------------------------------------
---REMOVE DUPLICATE I----------------
class Main{
    public static void main(String[]args){
        int[]nums={1,1,2,2,3,3,4,5};
        System.out.print(duplicate(nums));
        }

     static int duplicate(int[]nums) {
       if(nums.length==0)return 0;
       int i=0;
       for(int j=0;j<nums.length;j++){
           if(nums[j]!=nums[i]){
               nums[i]=nums[j];
               i++;
           }
       }
       return i-1;
     }
}
----------------------------------------------------------------------
---MOVE ZERO---
class Main{
    public static void main(String[]args){
        int[]nums={0,1,0,3,13};
        movezero(nums);
        for(int num:nums){
            System.out.print(" "+num);
        }
        }

        public static void movezero(int[]nums){
            int i=0;
            for(int j=0;j<nums.length;j++){
                if(nums[j]!=0){
                    nums[i]=nums[j];
                    i++;
                }
            }
            while(i<nums.length){
                nums[i]=0;
                i++;
            }
        }
    }
------------------------------------------------------------------------
---VALID PALINDRIME FOR LONG STRING-------

class Main {
    public static void main(String[] args) {
        String s="race,car";
        System.out.print(Ispalindrome(s));
    }
    static boolean Ispalindrome(String s){
        s=s.toLowerCase();
        StringBuilder cleaned = new StringBuilder();
        for(char c:s.toCharArray()){
            if(Character.isLetterOrDigit(c)){
                cleaned.append(c);
            }
        }
        int left=0;
        int right=cleaned.length()-1;
        while(left<right){
            if(cleaned.charAt(left) != cleaned.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
-------------------------------------------------------------------------------
---ATMOST ONE PALINDROME---
class Main{
    public static void main(String []args){
        String s="abca";
        System.out.print(atmost(s));
    }
    static boolean atmost(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return atmost(s, left + 1, right )||atmost( s, left, right - 1);
            }
            left++;
            right--;
        }
        return true;
    }
        static private boolean atmost(String s,int left,int right){
            while(left<right){
                if(s.charAt(left)!=s.charAt(right)){
                    return false;
                }
                left++;
                right--;
            }
            return true;
        }
    }
--------------------------------------------------------------------------------------------
